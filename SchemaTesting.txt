

SCHEMA TESTING QUERY

--1. SCHEMA TESTING

--VIEW ALL THE TABLE WITH IN A SCHEMA
SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_TYPE FROM INFORMATION_SCHEMA.TABLES ORDER BY TABLE_NAME;
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES ORDER BY TABLE_NAME;
SELECT * FROM INFORMATION_SCHEMA.TABLES

--CHECK NUMBER OF COLUMN IN A TABLE
SELECT COUNT(*) AS TOT_COLUMNS FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='EMPLOYEES';

--CHECK COLUMN NAME IN A TABLE
SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='EMPLOYEES';

--CHECK DATATYPE OF A COLUMN
SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='EMPLOYEES';

--CHECK NULL FIELD IN A TABLE
SELECT COLUMN_NAME, IS_NULLABLE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='EMPLOYEES';

--CHECK COLUMN KEY IN A TABLE
EXEC SP_PKEYS EMPLOYEES;
EXEC sp_fkeys EMPLOYEES;
SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE;
SELECT TABLE_NAME, CONSTRAINT_NAME, CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;
SELECT * FROM SYS.key_constraints WHERE TYPE='PK';

--CHECK REFFERENTIAL CONSTRAINTS

SELECT CONSTRAINT_NAME, UNIQUE_CONSTRAINT_NAME FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS;

--CHECK LIST OF TABLE AND CREATED DATE
SELECT NAME, CRDATE FROM SYSOBJECTS WHERE xtype='U';

select * from sys.types;

--2. DATA INTEGRITY TESTING
INTEGRITY TESTING MAINLY FOCUSED IN INTEGRITY CONSTRAINTS
--SQL CONSTRINTS ARE USED TO SPECIFY RULES FOR DATA IN A TABLE. CONSTRAINTS CAN BE SPECIFIED WHEN THE TABLE IS CREATED
  WITH THE CREATE TABLE STATEMENT, OR AFTER THE TABLE IS CREATED WITH THE ALTER TABLE STATEMENT STATEMENT.

CONSTRAINTS ARE: 
NOTNULL- ENSURES THAT COLUMN CAN NOT HAVE A NULL VALUE
UNIQUE - ENSURES THAT ALL VALUES IN A COLUMN ARE DIFFERENT
PRIMARY-  UNIQUELY IDENFTIFIES EACH ROW IN A TABLE. PRIMARY KEY SHOULD NOT HAVE NULL AND DUPLICATE VALUES
FOREIGN - UNIQUELY IDENTIFIES A ROW/RECORD IN ANOTHER TABLE
CHECK -  ENSURES THAT ALL VALUES IN A COLUMN SATISFIES A SPECIFIC CONDITIONS
DEFAULT- SETS A DEFAULT VALUE FOR A COLUMN WHEN NO VALUE IS SPECIFIED

--EXAMMPLE
CREATE TABLE COURSES (COURSEID INT PRIMARY KEY, COURSENAME VARCHAR(20) UNIQUE, DURATION INT, FEE INT CHECK(FEE BETWEEN 100 AND 500));
INSERT INTO COURSES VALUES (111, 'JAVA', 3, 500); --RESULT PASS
INSERT INTO COURSES VALUES (111, 'PYTHON', 2, 300);--INSERTING DUPLICATE VALUE THROUGHING ERROR
INSERT INTO COURSES VALUES (NULL, 'PYTHON', 2, 300);--INSERTING NULL VALUE THROUGHING ERROR

INSERT INTO COURSES VALUES(222, 'PYTHON', 2, 300) --INSERT NEW COURSE PYTHON IT IS INSERTED
INSERT INTO COURSES VALUES (333, 'PYTHON', 2, 300)--REJECTED - The duplicate key value is (PYTHON).

INSERT INTO COURSES VALUES (333, 'JAVASCRIPT', 1, 100);--INSERTED
INSERT INTO COURSES VALUES (555, 'VBSCRIPT', 1, 50);--REJECTED THE VALUE 50 NOT MATCH THE CRITERIA
INSERT INTO COURSES VALUES (555, 'VBSCRIPT', 1, 600)--REJECTED THE VALUE 600 NOT MATCH THE CRITERIA

  SELECT * FROM COURSES;

CREATE TABLE STUDENTS (
STID INT PRIMARY KEY,
SNAME VARCHAR(20) NOT NULL,
AGE INT CHECK (AGE BETWEEN 15 AND 30),
DOC DATETIME DEFAULT(GETDATE()),
COURSEID INT FOREIGN KEY REFERENCES COURSES(COURSEID)
)
ALTER TABLE STUDENTS ADD  DOJ DATETIME;
ALTER TABLE STUDENTS ADD CONSTRAINT fk_cid FOREIGN KEY (COURSEID) REFERENCES COURSES(COURSEID);
 
 
INSERT INTO STUDENTS (STID, SNAME, AGE,  COURSEID, DOJ) VALUES (101, 'JOHN', 20, NULL, 111);


 
  SELECT * FROM STUDENTS;

  SELECT SALARY+ISNULL(COMMISSION_PCT,0) FROM EMPLOYEES;

 --CREATING TARGET TABLE

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER,
DATEDIFF(YEAR, HIRE_DATE, GETDATE()) AS EXPERIENCE, JOB_ID, 
SALARY+ISNULL(COMMISSION_PCT,0) TOTAL_SALARY, MANAGER_ID, 
DEPARTMENT_ID INTO TGT_EMP FROM EMPLOYEES;

--MINUS QUERY SOURCE TO TARGET

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER,
DATEDIFF(YEAR, HIRE_DATE, GETDATE()) AS EXPERIENCE, JOB_ID, 
SALARY+ISNULL(COMMISSION_PCT,0) TOTAL_SALARY, MANAGER_ID, 
DEPARTMENT_ID FROM EMPLOYEES

EXCEPT

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, 
EXPERIENCE, JOB_ID, TOTAL_SALARY, MANAGER_ID, DEPARTMENT_ID  FROM TGT_EMP

--MINUS QUERY TARGET TO SOURCE 
 UNION

 SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, 
EXPERIENCE, JOB_ID, TOTAL_SALARY, MANAGER_ID, DEPARTMENT_ID  FROM TGT_EMP

EXCEPT

 SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER,
DATEDIFF(YEAR, HIRE_DATE, GETDATE()) AS EXPERIENCE, JOB_ID, 
SALARY+ISNULL(COMMISSION_PCT,0) TOTAL_SALARY, MANAGER_ID, 
DEPARTMENT_ID FROM EMPLOYEES

Adding index constraints
Cluster index
Non cluster index
